#language: android
#jdk: oraclejdk8
#sudo: false
#
#env:
#  global:
#    - ANDROID_API_LEVEL=25
#    - ANDROID_BUILD_TOOLS_VERSION=25.0.2
#
#before_cache:
#  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
#
#before_install:
#  - mkdir "$ANDROID_HOME/licenses" || true
#  - echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
#  - echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license" // Accepting license
#
#cache:
#  directories:      #Cache all dirs under .gradle folder
#    - $HOME/.gradle/daemon      #Cache daemon logs
#    - $HOME/.gradle/native      #Cache library downloaded from the gradle dependency
#    - $HOME/.gradle/wrapper     #Cache the gradle
#
#android:
#  components:
#    - tools
#    - platform-tools
#    # The BuildTools version used by your project
#    - build-tools-$ANDROID_BUILD_TOOLS_VERSION
#    # The SDK version used to compile your project
#    - android-$ANDROID_API_LEVEL
#    # Additional components
#    - extra-google-google_play_services
#    - extra-google-m2repository
#    - extra-android-m2repository
#    - addon-google_apis-google-$ANDROID_API_LEVEL
#    - sys-img-armeabi-v7a-google_apis-25
#
#
## Emulator Management: Create, Start and Wait
#before_script:
#  - echo no | android create avd --force -n test -t android-25 --abi google_apis/armeabi-v7a
#  - emulator -avd test -no-audio -no-window &
#  - android-wait-for-emulator
#  - adb shell input keyevent 82 &

language: android
jdk:
  - oraclejdk8
env:
  global:
    - ANDROID_API=28
    - EMULATOR_API=24
    - ANDROID_BUILD_TOOLS=28.0.3
android:
  components:
    - tools
    - android-$EMULATOR_API
    - platform-tools
    - tools
    - build-tools-$ANDROID_BUILD_TOOLS
    - android-$ANDROID_API
    - extra-android-support
    - extra-android-m2repository
    - extra-google-m2repository
    - sys-img-armeabi-v7a-android-$EMULATOR_API
  licenses:
    - ".+"
before_script:
  - echo "y" | android update sdk -a --no-ui --filter android-$EMULATOR_API
  - echo "y" | android update sdk -a --no-ui --filter sys-img-armeabi-v7a-android-$EMULATOR_API
  - android list targets | grep -E '^id:' | awk -F '"' '{$1=""; print $2}' # list all targets
  - echo no | android create avd --force -n test -t android-$EMULATOR_API --abi armeabi-v7a
  - emulator -avd test -no-skin -no-window &
  - android-wait-for-emulator
  - adb shell input keyevent 82 &
  - adb wait-for-device get-serialno
  - cd ${TRAVIS_BUILD_DIR}
  - chmod +x gradlew
  - ./gradlew --version
  - ./gradlew clean

script:
  - |
    ./gradlew build assembleAndroidTest -PtestCoverageEnabled='true'
    retval=$?
    if [ $retval -ne 0 ]; then
      echo "error on assembling, exit code: "$retval
      exit $retval
    fi
  # See http://stackoverflow.com/questions/21294945/error-unable-to-find-instrumentation-info-for-componentinfo
  # Instead of this (which doesn't give any output during tests execution):
  # - ./gradlew connectedCheck -PdisablePreDex --continue --stacktrace --debug
  # run:
  - |
    ./gradlew :hat:installDebug :hat:installDebugAndroidTest -PtestCoverageEnabled='true'
    retval=$?
    if [ $retval -ne 0 ]; then
      echo "error on install, exit code: "$retval
      exit $retval
    fi
  #
  # The below line causes Process crash due to absence of video device
  #- adb shell am instrument -w -r -e debug false org.andstatus.app.tests/android.test.InstrumentationTestRunner
  #
  # Run only tests, marked with a special annotation:
  # See https://developer.android.com/reference/android/test/InstrumentationTestRunner.html
  # For testing one method only:
  # - adb shell am instrument -w -r -e debug false -e coverage true -e class org.andstatus.app.service.CommandExecutorStrategyTest#testSearch org.andstatus.app.tests/androidx.test.runner.AndroidJUnitRunner
  - |
    adb shell am instrument -w -r -e executionMode travisTest -e coverage true org.andstatus.app.tests/androidx.test.runner.AndroidJUnitRunner |& tee build/adb-test.log
    retval=$?
    if [ $retval -ne 0 ]; then
      echo "error in adb, exit code: "$retval
      exit $retval
    fi
  # adb doesn't propagate exit code from tests, see https://code.google.com/p/android/issues/detail?id=3254
  # So we need to parse saved terminal log
  - |
    cat build/adb-test.log | grep "INSTRUMENTATION_STATUS: stack=" | grep -v "org.junit.AssumptionViolatedException"
    if [ $? -eq 0 ]; then
      echo "Test failure found"
      exit 1
    else
      cat build/adb-test.log | grep "OK ("
    fi
  # Copy coverage data from the emulator
  - |
    adb shell "rm /sdcard/Download/coverage.ec"
    adb shell "run-as org.andstatus.app cp /data/user/0/org.andstatus.app/files/coverage.ec /sdcard/Download"
  - cd app/build
  # copy to "build" folder, where it will be found by Sonar scanner
  - adb pull "/sdcard/Download/coverage.ec"
  - cd ../..
notifications:
  email: false
cache:
  directories:
    - $HOME/.m2
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.android/build-cache
before_install:
  - yes | sdkmanager "platforms;android-$ANDROID_API"
after_success:
  - ./gradlew bintrayUpload
#script:
#  - ./gradlew build connectedCheck
#  - ./gradlew clean build
#
#deploy:
#  provider: script
#  script: ./gradlew :clean :hat:assembleRelease :hat:bintrayUpload
#  skip_cleanup: true
#  dry-run: false
#  on:
#    branch: travis